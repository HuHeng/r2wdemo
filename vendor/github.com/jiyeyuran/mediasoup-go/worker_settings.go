package mediasoup

import (
	"fmt"
)

type WorkerSettings struct {
	/**
	 * Logging level for logs generated by the media worker subprocesses (check
	 * the Debugging documentation). Valid values are 'debug', 'warn', 'error' and
	 * 'none'. Default 'error'.
	 */
	LogLevel WorkerLogLevel `json:"logLevel,omitempty"`

	/**
	 * Log tags for debugging. Check the meaning of each available tag in the
	 * Debugging documentation.
	 */
	LogTags []WorkerLogTag `json:"logTags,omitempty"`

	/**
	 * Minimun RTC port for ICE, DTLS, RTP, etc. Default 10000.
	 */
	RtcMinPort uint16 `json:"rtcMinPort,omitempty"`

	/**
	 * Maximum RTC port for ICE, DTLS, RTP, etc. Default 59999.
	 */
	RtcMaxPort uint16 `json:"rtcMaxPort,omitempty"`

	/**
	 * Path to the DTLS public certificate file in PEM format. If unset, a
	 * certificate is dynamically created.
	 */
	DtlsCertificateFile string `json:"dtlsCertificateFile,omitempty"`

	/**
	 * Path to the DTLS certificate private key file in PEM format. If unset, a
	 * certificate is dynamically created.
	 */
	DtlsPrivateKeyFile string `json:"dtlsPrivateKeyFile,omitempty"`

	/**
	 * Custom application data.
	 */
	AppData interface{} `json:"appData,omitempty"`

	/**
	 * Custom options.
	 */
	CustomOptions map[string]interface{}
}

func (w WorkerSettings) Args() []string {
	args := []string{fmt.Sprintf("--logLevel=%s", w.LogLevel)}

	for _, logTag := range w.LogTags {
		args = append(args, fmt.Sprintf("--logTags=%s", logTag))
	}

	args = append(args, fmt.Sprintf("--rtcMinPort=%d", w.RtcMinPort))
	args = append(args, fmt.Sprintf("--rtcMaxPort=%d", w.RtcMaxPort))

	if len(w.DtlsCertificateFile) > 0 && len(w.DtlsPrivateKeyFile) > 0 {
		args = append(args,
			"--dtlsCertificateFile="+w.DtlsCertificateFile,
			"--dtlsPrivateKeyFile="+w.DtlsPrivateKeyFile,
		)
	}

	for key, value := range w.CustomOptions {
		args = append(args, fmt.Sprintf("--%s=%v", key, value))
	}

	return args
}

func (w WorkerSettings) Option() Option {
	return func(p *WorkerSettings) {
		if len(w.LogLevel) == 0 {
			w.LogLevel = WorkerLogLevel_Error
		}
		if w.RtcMinPort == 0 {
			w.RtcMinPort = 10000
		}
		if w.RtcMaxPort == 0 {
			w.RtcMaxPort = 59999
		}
		*p = w
	}
}

type WorkerUpdateableSettings struct {
	/**
	 * Logging level for logs generated by the media worker subprocesses (check
	 * the Debugging documentation). Valid values are 'debug', 'warn', 'error' and
	 * 'none'. Default 'error'.
	 */
	LogLevel WorkerLogLevel `json:"logLevel,omitempty"`

	/**
	 * Log tags for debugging. Check the meaning of each available tag in the
	 * Debugging documentation.
	 */
	LogTags []WorkerLogTag `json:"logTags,omitempty"`
}

func WithLogLevel(logLevel WorkerLogLevel) Option {
	return func(o *WorkerSettings) {
		o.LogLevel = logLevel
	}
}

func WithLogTags(logTags []WorkerLogTag) Option {
	return func(o *WorkerSettings) {
		o.LogTags = logTags
	}
}

func WithRtcMinPort(rtcMinPort uint16) Option {
	return func(o *WorkerSettings) {
		o.RtcMinPort = rtcMinPort
	}
}

func WithRtcMaxPort(rtcMaxPort uint16) Option {
	return func(o *WorkerSettings) {
		o.RtcMaxPort = rtcMaxPort
	}
}

func WithDtlsCert(dtlsCertificateFile, dtlsPrivateKeyFile string) Option {
	return func(o *WorkerSettings) {
		o.DtlsCertificateFile = dtlsCertificateFile
		o.DtlsPrivateKeyFile = dtlsPrivateKeyFile
	}
}

func WithCustomOption(key string, value interface{}) Option {
	return func(o *WorkerSettings) {
		if o.CustomOptions == nil {
			o.CustomOptions = make(map[string]interface{})
		}
		o.CustomOptions[key] = value
	}
}
